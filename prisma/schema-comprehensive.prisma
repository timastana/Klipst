generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ... existing models ...

// Enhanced Lease Management
model Lease {
  id                String      @id @default(cuid())
  propertyId        String
  tenantId          String
  landlordId        String
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Float
  securityDeposit   Float
  status            LeaseStatus @default(ACTIVE)
  
  // Rent calculation settings
  rentDueDay        Int         @default(1) // Day of month rent is due
  lateFeeAmount     Float       @default(0)
  lateFeeGraceDays  Int         @default(5)
  
  // Lease terms
  petDeposit        Float       @default(0)
  utilitiesIncluded Boolean     @default(false)
  parkingIncluded   Boolean     @default(false)
  
  // Rent increases
  rentIncreaseRate  Float       @default(0) // Annual percentage
  nextIncreaseDate  DateTime?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  property          Property    @relation(fields: [propertyId], references: [id])
  tenant            User        @relation("TenantLeases", fields: [tenantId], references: [id])
  landlord          User        @relation("LandlordLeases", fields: [landlordId], references: [id])
  
  rentPayments      RentPayment[]
  leaseCharges      LeaseCharge[]
  maintenanceRequests MaintenanceRequest[]
  
  @@index([propertyId, status])
  @@index([tenantId, status])
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

// Enhanced Rent Payment with detailed tracking
model RentPayment {
  id                String        @id @default(cuid())
  leaseId           String
  amount            Float
  dueDate           DateTime
  paidDate          DateTime?
  status            PaymentStatus @default(PENDING)
  
  // Payment breakdown
  baseRent          Float
  lateFees          Float         @default(0)
  utilities         Float         @default(0)
  parking           Float         @default(0)
  otherCharges      Float         @default(0)
  discounts         Float         @default(0)
  
  // Payment details
  paymentMethod     String?
  transactionId     String?
  stripePaymentId   String?
  paypalPaymentId   String?
  
  // Late payment tracking
  daysLate          Int           @default(0)
  lateFeeApplied    Boolean       @default(false)
  
  // Receipts and notes
  receiptUrl        String?
  notes             String?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  lease             Lease         @relation(fields: [leaseId], references: [id])
  
  @@index([leaseId, dueDate])
  @@index([status, dueDate])
}

// Additional charges (utilities, parking, etc.)
model LeaseCharge {
  id          String      @id @default(cuid())
  leaseId     String
  type        ChargeType
  description String
  amount      Float
  frequency   Frequency   @default(MONTHLY)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())

  lease       Lease       @relation(fields: [leaseId], references: [id])
  
  @@index([leaseId, isActive])
}

enum ChargeType {
  UTILITY
  PARKING
  PET_FEE
  STORAGE
  AMENITY
  LATE_FEE
  OTHER
}

enum Frequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  ONE_TIME
}

// Maintenance and repairs
model MaintenanceRequest {
  id          String            @id @default(cuid())
  leaseId     String?
  propertyId  String
  tenantId    String?
  title       String
  description String            @db.Text
  priority    Priority          @default(MEDIUM)
  status      MaintenanceStatus @default(PENDING)
  category    String
  
  // Cost tracking
  estimatedCost Float?
  actualCost    Float?
  
  // Assignment
  assignedTo    String?
  assignedDate  DateTime?
  completedDate DateTime?
  
  // Images and documents
  images        String[]
  documents     String[]
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  lease         Lease?            @relation(fields: [leaseId], references: [id])
  property      Property          @relation(fields: [propertyId], references: [id])
  tenant        User?             @relation("TenantMaintenance", fields: [tenantId], references: [id])
  
  @@index([propertyId, status])
  @@index([tenantId, status])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Financial accounting
model Transaction {
  id            String          @id @default(cuid())
  propertyId    String?
  leaseId       String?
  type          TransactionType
  category      String
  description   String
  amount        Float
  date          DateTime
  
  // Accounting details
  accountCode   String?
  taxDeductible Boolean         @default(false)
  receiptUrl    String?
  
  // References
  referenceId   String?         // Link to rent payment, expense, etc.
  referenceType String?
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  property      Property?       @relation(fields: [propertyId], references: [id])
  
  @@index([propertyId, date])
  @@index([type, date])
}

enum TransactionType {
  INCOME
  EXPENSE
  DEPOSIT
  REFUND
}

// Property expenses
model Expense {
  id            String      @id @default(cuid())
  propertyId    String
  category      ExpenseCategory
  description   String
  amount        Float
  date          DateTime
  vendor        String?
  receiptUrl    String?
  taxDeductible Boolean     @default(false)
  recurring     Boolean     @default(false)
  
  // Recurring expense details
  frequency     Frequency?
  nextDueDate   DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  property      Property    @relation(fields: [propertyId], references: [id])
  
  @@index([propertyId, date])
  @@index([category, date])
}

enum ExpenseCategory {
  MAINTENANCE
  REPAIRS
  UTILITIES
  INSURANCE
  TAXES
  MANAGEMENT
  MARKETING
  LEGAL
  ACCOUNTING
  SUPPLIES
  OTHER
}

// Rent roll and reporting
model RentRoll {
  id              String    @id @default(cuid())
  propertyId      String
  month           Int
  year            Int
  
  // Summary data
  totalUnits      Int
  occupiedUnits   Int
  vacantUnits     Int
  occupancyRate   Float
  
  // Financial summary
  potentialRent   Float
  actualRent      Float
  lossToVacancy   Float
  otherIncome     Float
  totalIncome     Float
  
  // Expenses
  totalExpenses   Float
  netOperatingIncome Float
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  property        Property  @relation(fields: [propertyId], references: [id])
  
  @@unique([propertyId, month, year])
  @@index([year, month])
}

// Tenant screening and applications
model TenantApplication {
  id                String              @id @default(cuid())
  propertyId        String
  applicantId       String
  status            ApplicationStatus   @default(PENDING)
  
  // Personal information
  firstName         String
  lastName          String
  email             String
  phone             String
  dateOfBirth       DateTime
  ssn               String?             // Encrypted
  
  // Employment
  employer          String?
  jobTitle          String?
  monthlyIncome     Float?
  employmentLength  String?
  
  // Rental history
  currentAddress    String?
  previousLandlord  String?
  rentAmount        Float?
  reasonForMoving   String?
  
  // References
  references        Json?
  
  // Screening results
  creditScore       Int?
  backgroundCheck   Boolean?
  incomeVerified    Boolean?
  
  // Documents
  documents         String[]
  
  applicationFee    Float               @default(0)
  feePaid           Boolean             @default(false)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  property          Property            @relation(fields: [propertyId], references: [id])
  applicant         User                @relation("TenantApplications", fields: [applicantId], references: [id])
  
  @@index([propertyId, status])
  @@index([applicantId, status])
}

// Update existing models with new relationships
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TENANT)
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  ownedProperties    Property[]        @relation("PropertyOwner")
  tenantApplications Application[]
  rentPayments       RentPayment[]
  favorites          PropertyFavorite[]
  viewingRequests    ViewingRequest[]
  documents          Document[]
  notifications      Notification[]
  
  // New relationships
  tenantLeases       Lease[]           @relation("TenantLeases")
  landlordLeases     Lease[]           @relation("LandlordLeases")
  maintenanceRequests MaintenanceRequest[] @relation("TenantMaintenance")
  applications       TenantApplication[] @relation("TenantApplications")
}

model Property {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  address     String
  city        String
  postcode    String
  country     String        @default("UK")
  latitude    Float?
  longitude   Float?
  price       Float
  bedrooms    Int
  bathrooms   Int
  propertyType PropertyType
  status      PropertyStatus @default(AVAILABLE)
  furnished   Boolean       @default(false)
  petFriendly Boolean       @default(false)
  garden      Boolean       @default(false)
  parking     Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownerId String
  owner   User   @relation("PropertyOwner", fields: [ownerId], references: [id])

  images       PropertyImage[]
  applications Application[]
  rentPayments RentPayment[]
  favorites    PropertyFavorite[]
  viewings     ViewingRequest[]
  documents    Document[]
  
  // New relationships
  leases           Lease[]
  maintenanceRequests MaintenanceRequest[]
  transactions     Transaction[]
  expenses         Expense[]
  rentRolls        RentRoll[]
  tenantApplications TenantApplication[]

  @@index([city, propertyType, status])
  @@index([price])
}
